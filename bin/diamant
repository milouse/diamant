#!/usr/bin/env ruby
# frozen_string_literal: true

require 'diamant'
require 'diamant/cert_generator'
require 'optparse'

options = { hostname: '127.0.0.1', port: 1965 }
OptionParser.new do |parser| # rubocop:disable Metrics/BlockLength
  parser.banner = "Usage: #{parser.program_name} [options] [ command [ arg ] ]"

  parser.separator ''

  parser.separator 'Commands'

  parser.separator <<~COMMANDSHELP
    serve [ public_path ]  Serves static files from the given public_path.
                           (defaults to ./public_gmi)

    generate_tls_cert [ hostname ]
                           Generates a new self-signed certificate for the
                           given hostname and its related private key.
                           (defaults to localhost)

    If no command is given, or if the command is not recognized, the given
    string is taken as a public_path to serve from.  That is:

        #{parser.program_name} ~/my_gemini_capsule

    is the same thing than:

        #{parser.program_name} serve ~/my_gemini_capsule
  COMMANDSHELP

  parser.separator ''

  parser.separator 'Options'

  parser.on('-h', '--help',
            'Show this help message and quit.') do
    puts parser.help
    exit
  end

  parser.on('-v', '--version',
            "Show #{parser.program_name} version and quit.") do
    puts Diamant::VERSION
    exit
  end

  parser.on('-b', '--bind HOST',
            'Hostname to bind to (127.0.0.1, 0.0.0.0, ::1...).',
            '(defaults to 127.0.0.1)') do |o|
    options[:bind] = o
  end

  parser.on('-p', '--port PORT',
            'Define the TCP port to bind to.',
            '(defaults to 1965)') do |o|
    options[:port] = o.to_i
  end

  parser.on('--cert CERT',
            'Path to the TLS certificate to use.',
            '(defaults to cert.pem)') do |o|
    options[:cert] = o
  end

  parser.on('--pkey PKEY',
            'Path to the TLS private key to use.',
            '(defaults to key.rsa)') do |o|
    options[:pkey] = o
  end
end.parse!

command = ARGV.shift
case command
when 'generate_tls_cert'
  Diamant::CertGenerator.new(ARGV[0]).write
  exit
when 'serve'
  options[:public_path] = ARGV[0]
else
  options[:public_path] = command
end

options[:public_path] ||= './public_gmi'

Diamant::Server.new(options).start
