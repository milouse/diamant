#+title: Diamant Gemini Server
#+subtitle: A simple Gemini server for static files.
#+author: Ã‰tienne Deparis
#+language: en

Diamant is a server for the [[https://gemini.circumlunar.space/][Gemini network protocol]], built in Ruby. Diamant
has very few features, and can only serve static files.

Internally, it uses the OpenSSL library to handle the TLS sessions, and the
Ruby ~Thread~ implementation to handle concurrent requests.

* Installation and setup

Diamant is a [[https://rubygems.org/][Ruby gem]]. You need a working Ruby environment to use it. We
recommand you to use [[https://rvm.io][RVM]] and a specific gemset. However it will works with a
global ruby installation too.

#+caption: Installation procedure with RVM
#+begin_src shell
  rvm get latest
  rvm use ruby-2.7.2@diamant --create
  gem install diamant
#+end_src

Then you need to a generate self-signed TLS certificate and private key. In
the following example, remember to replace the example hostname
~myhostname.com~ by the one you would like to use.

Diamant provides a tool to create these certificate and key:

#+caption: TLS certificate and private key creation with Diamant
#+begin_src shell
  diamant generate_tls_cert myhostname.com
#+end_src

You can also use the OpenSSL command if you prefer:

#+caption: TLS certificate and private key creation with OpenSSL
#+begin_src shell
  openssl req -x509 -newkey rsa:4096 -keyout key.rsa -out cert.pem
      -days 3650 -nodes -subj "/CN=myhostname.com"
#+end_src

Finally, you should create a folder to store your static files to serve:

#+caption: Creation of the first Gemini files
#+begin_src shell
  mkdir public_gmi
  echo 'Hello World!' > public_gmi/index.gmi
#+end_src

* Run the server

** Basic way

With all the default options, runing the server is as simple as:

#+caption: Running Diamant with default options
#+begin_src shell
  diamant
#+end_src

However, you may want to use some other options:

#+caption: Running Diamant with some other options
#+begin_src shell
  diamant --public-path ~/my_gemini_site -b 0.0.0.0
#+end_src

To see all possible options, just enter the following command:

#+caption: Access Diamant help
#+begin_src shell
  diamant --help
#+end_src

** As a systemd service

You can inspire yourself from the following service example file:

#+caption: systemd service file example for Diamant
#+begin_src conf
  [Unit]
  Description=Control Diamant Gemini Server
  After=network.target

  [Service]
  Type=simple
  User=gemini
  Group=gemini
  Environment="PATH=/home/gemini/.rvm/gems/ruby-2.7.2@diamant/bin:/home/gemini/.rvm/gems/ruby-2.7.2@global/bin:/home/gemini/.rvm/rubies/ruby-2.7.2/bin:/home/gemini/.rvm/bin:/usr/local/bin:/usr/bin:/bin"
  Environment="GEM_HOME=/home/gemini/.rvm/gems/ruby-2.7.2@diamant"
  Environment="GEM_PATH=/home/gemini/.rvm/gems/ruby-2.7.2@diamant:/home/gemini/.rvm/gems/ruby-2.7.2@global"
  WorkingDirectory=/home/gemini
  ExecStart=/home/gemini/.rvm/gems/ruby-2.7.2@diamant/bin/diamant -b 0.0.0.0
  KillMode=control-group

  [Install]
  WantedBy=multi-user.target
#+end_src
